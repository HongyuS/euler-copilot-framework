{{- if .Values.databases.mongo.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deploy-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: mongo-{{ .Release.Name }}
spec:
  replicas: {{ .Values.globals.replicaCount }}
  selector:
    matchLabels:
      app: mongo-{{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/mongo/mongo-secret.yaml") . | sha256sum }}
      labels:
        app: mongo-{{ .Release.Name }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: mongo
          image: "{{ if ne (.Values.databases.mongo.image.registry | toString ) "" }}{{ .Values.databases.mongo.image.registry }}{{ else }}{{ .Values.globals.imageRegistry }}{{ end }}/{{ .Values.databases.mongo.image.name }}:{{ .Values.databases.mongo.image.tag | toString }}"
          imagePullPolicy: {{ if ne (.Values.databases.mongo.image.imagePullPolicy | toString) "" }}{{ .Values.databases.mongo.image.imagePullPolicy }}{{ else }}{{ .Values.globals.imagePullPolicy }}{{ end }}
          command:
            - bash
            - -c
            - |
              if [ ! -f "/data/db/file.key" ]; then
                  openssl rand -base64 756 > /data/db/file.key;
              fi
              chmod 400 /data/db/file.key;
              chown 999:999 /data/db/file.key;
              exec docker-entrypoint.sh $$@
          args:
            - "mongod"
            - "--replSet"
            - "rs0"
            - "--bind_ip_all"
            - "--keyFile"
            - "/data/db/file.key"
          ports:
            - containerPort: 27017
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - bash
                - /tmp/healthcheck.sh
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 60
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "euler_copilot"
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret-{{ .Release.Name }}
                  key: mongo-password
            - name: MONGO_INITDB_DATABASE
              value: euler_copilot
          volumeMounts:
            - mountPath: /data/db
              name: mongo-data
            - mountPath: /tmp/healthcheck.sh
              name: mongo-init
              subPath: healthcheck.sh
          resources:
            {{- toYaml .Values.databases.mongo.resources | nindent 12 }}
      restartPolicy: Always
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc-{{ .Release.Name }}
        - name: mongo-init
          secret:
            secretName: mongo-secret-{{ .Release.Name }}
{{- end }}
